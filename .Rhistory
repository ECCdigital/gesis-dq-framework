# Run the Shiny App
shinyApp(ui, server)
install.packages("shiny")
source("~/.active-rstudio-document")
# Read the data
dt_data <- read_excel("data/data_decision_tree_copy.xlsx")
install.package("readxl")
install.packages("readxl")
xcode-select --install
# Read the data
dt_data <- read_excel("data/data_decision_tree_copy.xlsx")
# Install packages
install.packages("openxlsx")
library(shiny); runApp('DT.R')
dt_data <- readxl::read_excel("Data/data_decision_tree.xlsx")
View(dt_data)
runApp('DT.R')
reactive_values <- reactiveValues(
datatype_selected = NULL,
perspective_selected = NULL,
granularity_selected = NULL,
filtered_data = NULL # storing filtered data
)
unique(dt_data$perspective)
unique(dt_data$perspective)
observe({
output$col_perspective_ui <- renderUI({
if (is.null(input$col_datatype)) return(NULL)
selectInput(inputId = "col_perspective", label = "Perspective:", choices = c("", unique(dt_data$perspective)))
})
observe({
output$col_perspective_ui <- renderUI({
if (is.null(input$col_datatype)) return(NULL)
selectInput(inputId = "col_perspective", label = "Perspective:", choices = c("", unique(dt_data$perspective)))
})
observe({
output$col_perspective_ui <- renderUI({
if (is.null(input$col_datatype)) return(NULL)
selectInput(inputId = "col_perspective", label = "Perspective:", choices = c("", unique(dt_data$perspective)))
})
runApp('DT.R')
# Load necessary packages
library(shiny)
library(dplyr)
library(readxl)
library(openxlsx)
# Assume the data is preloaded or read outside the server function for simplicity in this example
# You should ensure the file path and method of loading the data fit your actual use case
dt_data <- read_excel("Data/data_decision_tree.xlsx")
# Define the user interface
ui <- fluidPage(
titlePanel("Decision Tree Helper"),
sidebarLayout(
sidebarPanel(
helpText("This tool helps you make decisions based on your data."),
selectInput("datatype", "Choose Data Type:", choices = c("", unique(dt_data$datatype))),
uiOutput("perspective_ui"), # Dynamic UI for perspective
uiOutput("granularity_ui"), # Dynamic UI for granularity
uiOutput("targeted_ui")     # Dynamic UI for targeted
),
mainPanel(
dataTableOutput("table_filtered"),
downloadButton("download_filtered", "Download Filtered Data")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive value to store filtered data
filtered_data <- reactive({
req(input$datatype, input$perspective, input$granularity, input$targeted) # Ensure all inputs are selected
dt_data %>%
filter(
datatype == input$datatype,
perspective == input$perspective,
granularity == input$granularity,
targeted == input$targeted
)
})
# Dynamic UI for selecting perspective based on datatype
output$perspective_ui <- renderUI({
if (is.null(input$datatype) || input$datatype == "") return(NULL)
selectInput("perspective", "Choose Perspective:", choices = c("", unique(dt_data$dt_data$datatype == input$datatype,]$perspective)))
# Load necessary packages
library(shiny)
library(dplyr)
library(readxl)
library(openxlsx)
# Assume the data is preloaded or read outside the server function for simplicity in this example
# You should ensure the file path and method of loading the data fit your actual use case
dt_data <- read_excel("Data/data_decision_tree.xlsx")
# Define the user interface
ui <- fluidPage(
titlePanel("Decision Tree Helper"),
sidebarLayout(
sidebarPanel(
helpText("This tool helps you make decisions based on your data."),
selectInput("datatype", "Choose Data Type:", choices = c("", unique(dt_data$datatype))),
uiOutput("perspective_ui"), # Dynamic UI for perspective
uiOutput("granularity_ui"), # Dynamic UI for granularity
uiOutput("targeted_ui")     # Dynamic UI for targeted
),
mainPanel(
dataTableOutput("table_filtered"),
downloadButton("download_filtered", "Download Filtered Data")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive value to store filtered data
filtered_data <- reactive({
req(input$datatype, input$perspective, input$granularity, input$targeted) # Ensure all inputs are selected
dt_data %>%
filter(
datatype == input$datatype,
perspective == input$perspective,
granularity == input$granularity,
targeted == input$targeted
)
})
# Dynamic UI for selecting perspective based on datatype
output$perspective_ui <- renderUI({
if (is.null(input$datatype) || input$datatype == "") return(NULL)
selectInput("perspective", "Choose Perspective:", choices = c("", unique(dt_data$dt_data$datatype == input$datatype,]$perspective)))
# Load necessary packages
library(shiny)
library(dplyr)
library(readxl)
library(openxlsx)
# Assume the data is preloaded or read outside the server function for simplicity in this example
# You should ensure the file path and method of loading the data fit your actual use case
dt_data <- read_excel("Data/data_decision_tree.xlsx")
# Define the user interface
ui <- fluidPage(
titlePanel("Decision Tree Helper"),
sidebarLayout(
sidebarPanel(
helpText("This tool helps you make decisions based on your data."),
selectInput("datatype", "Choose Data Type:", choices = c("", unique(dt_data$datatype))),
uiOutput("perspective_ui"), # Dynamic UI for perspective
uiOutput("granularity_ui"), # Dynamic UI for granularity
uiOutput("targeted_ui")     # Dynamic UI for targeted
),
mainPanel(
dataTableOutput("table_filtered"),
downloadButton("download_filtered", "Download Filtered Data")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive value to store filtered data
filtered_data <- reactive({
req(input$datatype, input$perspective, input$granularity, input$targeted) # Ensure all inputs are selected
dt_data %>%
filter(
datatype == input$datatype,
perspective == input$perspective,
granularity == input$granularity,
targeted == input$targeted
)
})
# Dynamic UI for selecting perspective based on datatype
output$perspective_ui <- renderUI({
if (is.null(input$datatype) || input$datatype == "") return(NULL)
selectInput("perspective", "Choose Perspective:", choices = c("", unique(dt_data$dt_data$datatype == input$datatype,]$perspective)))
targeted == input$targeted
# Dynamic UI for selecting granularity based on perspective
output$granularity_ui <- renderUI({
req(input$perspective)
selectInput("granularity", "Choose Granularity:", choices = c("", unique(dt_data[dt_data$perspective == input$perspective,]$granularity)))
})
# Load necessary packages
library(shiny)
library(dplyr)
library(readxl)
library(openxlsx)
# Assume the data is preloaded or read outside the server function for simplicity in this example
# You should ensure the file path and method of loading the data fit your actual use case
dt_data <- read_excel("Data/data_decision_tree.xlsx")
# Define the user interface
ui <- fluidPage(
titlePanel("Decision Tree Helper"),
sidebarLayout(
sidebarPanel(
helpText("This tool helps you make decisions based on your data."),
selectInput("datatype", "Choose Data Type:", choices = c("", unique(dt_data$datatype))),
uiOutput("perspective_ui"), # Dynamic UI for perspective
uiOutput("granularity_ui"), # Dynamic UI for granularity
uiOutput("targeted_ui")     # Dynamic UI for targeted
),
mainPanel(
dataTableOutput("table_filtered"),
downloadButton("download_filtered", "Download Filtered Data")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive value to store filtered data
filtered_data <- reactive({
req(input$datatype, input$perspective, input$granularity, input$targeted) # Ensure all inputs are selected
dt_data %>%
filter(
datatype == input$datatype,
perspective == input$perspective,
granularity == input$granularity,
targeted == input$targeted
)
})
# Dynamic UI for selecting perspective based on datatype
output$perspective_ui <- renderUI({
if (is.null(input$datatype) || input$datatype == "") return(NULL)
selectInput("perspective", "Choose Perspective:", choices = c("", unique(dt_data[dt_data$datatype == input$datatype,]$perspective)))
})
# Dynamic UI for selecting granularity based on perspective
output$granularity_ui <- renderUI({
req(input$perspective)
selectInput("granularity", "Choose Granularity:", choices = c("", unique(dt_data[dt_data$perspective == input$perspective,]$granularity)))
})
# Dynamic UI for selecting targeted based on granularity
output$targeted_ui <- renderUI({
req(input$granularity)
selectInput("targeted", "Choose Targeted Option:", choices = c("", unique(dt_data[dt_data$granularity == input$granularity,]$targeted)))
})
# Render filtered data table
output$table_filtered <- renderDataTable({
filtered_data()
}, options = list(pageLength = 5, autoWidth = TRUE)) # Customize table display options
# Download handler for filtered data
output$download_filtered <- downloadHandler(
filename = function() { paste("filtered_data-", Sys.Date(), ".xlsx", sep = "") },
content = function(file) {
write.xlsx(filtered_data(), file)
}
)
}
# Run the application
shinyApp(ui, server)
library(shiny); runApp('running_version.R')
library(shiny); runApp('running_version.R')
runApp('DT.R')
runApp('running_version.R')
runApp('DT.R')
library(shiny); runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
View(dt_data)
runApp('running_version.R')
dt_data <- read_excel("Data/data_decision_tree.xlsx")
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
library(shiny); runApp('running_version.R')
runApp('running_version.R')
git init  # Initialize Git for this project
git init
git remote add origin https://github.com/FelixBergstein/ShinyGesis.git  # Link to your GitHub repo
git remote -v
git remote -v
git --version
git remote add origin https://github.com/FelixBergstein/ShinyGesis.git
system("git init")
system("git remote add origin https://github.com/FelixBergstein/ShinyGesis.git")
# Initialize Git (if necessary)
system("git init")
# Link to GitHub
system("git remote add origin https://github.com/FelixBergstein/ShinyGesis.git")
# Add, commit, and push changes
system("git add .")
system('git commit -m "Initial commit"')
system("git push -u origin master")  # or 'main'
# Pull changes from GitHub (if needed)
system("git pull origin master")  # or 'main'
# Check Git status
system("git status")
# Initialize Git (if necessary)
system("git init")
# Link to GitHub
system("git remote add origin https://github.com/FelixBergstein/ShinyGesis.git")
# Add, commit, and push changes (using 'main' instead of 'master')
system("git add .")
system('git commit -m "Initial commit"')
system("git push -u origin main")  # Using 'main' here
# Pull changes from GitHub (if needed)
system("git pull origin main")
# Check Git status
system("git status")
library(shiny); runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
runApp('running_version.R')
